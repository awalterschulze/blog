<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adenoid Adventures</title>
    <link>https://awalterschulze.github.io/blog/</link>
    <description>Recent content on Adenoid Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>awalterschulze@gmail.com (Walter Schulze)</managingEditor>
    <webMaster>awalterschulze@gmail.com (Walter Schulze)</webMaster>
    <lastBuildDate>Sun, 07 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://awalterschulze.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Programmerâ€™s Regret: Neglecting Math at University</title>
      <link>https://awalterschulze.github.io/blog/post/neglecting-math-at-university/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/neglecting-math-at-university/</guid>
      <description>Does Math Matter? Math matters both more and less than you think&amp;hellip;
Yes, you can ignore math and be a highly paid professional programmer. Programming is a wide enough field that you can choose which areas you want to focus on &amp;ndash; some of which do not require math &amp;ndash; and still be successful. On the other hand:
 Mathematics is the tool used to solve specialized problems, and Programming is doing mathematics.</description>
    </item>
    
    <item>
      <title>For Sum Types: Golang&#39;s multiple return parameters are overrated</title>
      <link>https://awalterschulze.github.io/blog/post/sum-types-over-multiple-returns/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/sum-types-over-multiple-returns/</guid>
      <description>In this Go Experience Report I am going to make a case for sum types over multiple return parameters.
Analysis of multiple return parameters I wrote a little tool which does some analysis of Go source code. Thank you to the go/types library. The tool simply counts the number of times multiple return parameters are used. I ran this tool over the standard library and these are the results:</description>
    </item>
    
    <item>
      <title>Monads for Go Programmers</title>
      <link>https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/</link>
      <pubDate>Wed, 20 Sep 2017 12:19:12 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/</guid>
      <description>Why? Monads are all about function composition and hiding the tedious part of it.
After 7 years of being a Go programmer, typing if err != nil can become quite tedious. Everytime I type if err != nil I thank the Gophers for a readable language with great tooling, but at the same time I curse them for making me feel like I&amp;rsquo;m Bart Simpson in detention.
I suspect I am not the only one, but</description>
    </item>
    
  </channel>
</rss>