<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Adenoid Adventures</title>
    <link>https://awalterschulze.github.io/blog/</link>
    <description>Recent content on Adenoid Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>awalterschulze@gmail.com (Walter Schulze)</managingEditor>
    <webMaster>awalterschulze@gmail.com (Walter Schulze)</webMaster>
    <lastBuildDate>Sat, 26 Aug 2017 12:19:12 +0200</lastBuildDate>
    
	<atom:link href="https://awalterschulze.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monads for Go Programmers</title>
      <link>https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/</link>
      <pubDate>Sat, 26 Aug 2017 12:19:12 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/</guid>
      <description>Why? Monads are all about function composition and hiding the tedious part of it.
After 7 years of being a Go programmer, typing if err != nil can become quite tedious. Everytime I type if err != nil I thank the Gophers for a readable language with great tooling, but at the same time I curse them for making me feel like I&amp;rsquo;m Bart Simpson in detention.
I suspect I am not the only one, but</description>
    </item>
    
    <item>
      <title>Go Experience Report: from a code generator developer [DRAFT]</title>
      <link>https://awalterschulze.github.io/blog/post/go-experience-report/</link>
      <pubDate>Sun, 01 Jan 2017 12:19:12 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/go-experience-report/</guid>
      <description>Introduction I have written many code generators for go, these include:
 gogoprotobuf - Protocol Buffers for Go with Gadgets goderive - Derives functions from their input parameters gocc - Parser / Scanner Generator (To be fair, I am only helping to maintain this one) a project specific one and some proprietary ones  Code generation is a hobby, a job (sometimes) and a pursuit for me.
I would like to talk about my experience developing goderive and explain what I would like in Go 2 as a developer of code generators.</description>
    </item>
    
    <item>
      <title>[TESTING MOBILE]</title>
      <link>https://awalterschulze.github.io/blog/post/test-mobile/</link>
      <pubDate>Thu, 01 Jan 1970 12:19:12 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/test-mobile/</guid>
      <description>Some text
Some other text
More and more and more and more and more text
More and more and more and more and more text More and more and more and more and more text More and more and more and more and more text More and more and more and more and more text More and more and more and more and more text More and more and more and more and more text More and more and more and more and more text</description>
    </item>
    
  </channel>
</rss>