<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algebraic Data Types on Adenoid Adventures</title>
    <link>https://awalterschulze.github.io/blog/tags/algebraic-data-types/</link>
    <description>Recent content in Algebraic Data Types on Adenoid Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>awalterschulze@gmail.com (Walter Schulze)</managingEditor>
    <webMaster>awalterschulze@gmail.com (Walter Schulze)</webMaster>
    <lastBuildDate>Mon, 25 Sep 2017 13:32:51 +0200</lastBuildDate>
    
	<atom:link href="https://awalterschulze.github.io/blog/tags/algebraic-data-types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>For Sum Types: Golang&#39;s multiple return parameters are overrated</title>
      <link>https://awalterschulze.github.io/blog/post/sum-types-over-multiple-returns/</link>
      <pubDate>Mon, 25 Sep 2017 13:32:51 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/sum-types-over-multiple-returns/</guid>
      <description>In this Go Experience Report I am going to make a case for sum types over multiple return parameters.
Analysis of multiple return parameters I wrote a little tool which does some analysis of Go source code.
Thank you to the go/types library.
The tool simply counts the number of times multiple return parameters are used. I ran this tool over the standard library and these are the results:</description>
    </item>
    
  </channel>
</rss>