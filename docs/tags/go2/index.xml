<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go2 on Adenoid Adventures</title>
    <link>https://awalterschulze.github.io/blog/tags/go2/</link>
    <description>Recent content in Go2 on Adenoid Adventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>awalterschulze@gmail.com (Walter Schulze)</managingEditor>
    <webMaster>awalterschulze@gmail.com (Walter Schulze)</webMaster>
    <lastBuildDate>Sun, 01 Jan 2017 12:19:12 +0200</lastBuildDate>
    
	<atom:link href="https://awalterschulze.github.io/blog/tags/go2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Experience Report: from a code generator developer [DRAFT]</title>
      <link>https://awalterschulze.github.io/blog/post/go-experience-report/</link>
      <pubDate>Sun, 01 Jan 2017 12:19:12 +0200</pubDate>
      <author>awalterschulze@gmail.com (Walter Schulze)</author>
      <guid>https://awalterschulze.github.io/blog/post/go-experience-report/</guid>
      <description>Introduction I have written many code generators for go, these include:
 gogoprotobuf - Protocol Buffers for Go with Gadgets goderive - Derives functions from their input parameters gocc - Parser / Scanner Generator (To be fair, I am only helping to maintain this one) a project specific one and some proprietary ones  Code generation is a hobby, a job (sometimes) and a pursuit for me.
I would like to talk about my experience developing goderive and explain what I would like in Go 2 as a developer of code generators.</description>
    </item>
    
  </channel>
</rss>